import React, { Component } from 'react';
import { Field, reduxForm } from 'redux-form';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';
import { createPost } from '../actions/index';

class PostsNew extends Component {
    renderField(field) {
        // console.warn('renderTitleField field: ', field);

        const { meta: { touched, error } } = field;
        const className = `form-group ${touched && error ? 'has-danger' : ''}`;

        return (
            <div className={className}>
                <label>{field.label}</label>
                <input
                    className="form-control"
                    type="text"
                    //instead of:
                    //onInputChange={field.input.onChange}
                    //onInputBlur={field.input.onBlur}
                    //wire up pre-generated redux-form event handlers
                    {...field.input}
                />
                <div className="text-help">
                    {touched ? error : ''}
                </div>
            </div>
        )
    }

    onSubmit(values) {
        this.props.createPost(values, () => {
            this.props.history.push('/');
        });
    }

    render() {
        //handleSubmit is available on props through reduxForm (similar to  'connect')
        const { handleSubmit } = this.props;

        return (
            <form onSubmit={handleSubmit(this.onSubmit.bind(this))} >
                <Field
                    name="title" //the piece of state reflected by this cmp
                    label="Title for Post"
                    component={this.renderField} //a function or cmp that is used to display this field cmp
                />
                <Field
                    name="categories"
                    label="Categories"
                    component={this.renderField}
                />
                <Field
                    name="content"
                    label="Post Content"
                    component={this.renderField}
                />
                <button type="submit" className="btn btn-primary" >Submit</button>
                <Link className="btn btn-danger" to="/posts">
                    Cancel
                </Link>
            </form>
        )
    }
}

function validate(values) {
    const errors = {};

    //validate the inputs from 'values'
    if (!values.title) {
        errors.title = 'Enter a title!';
    }

    if (!values.categories) {
        errors.categories = 'Enter some categories';
    }
    
    if (!values.content) {
        errors.content = 'Enter some content please';
    }

    // if errors is empty, the form is fine to submit
    // if errors has *any* props, redux form assumes form in invalid
    return errors;
}

//function helper - treated similarly to the 'connect' function
//export reduxForm instead of using the connect function or the class itself
export default reduxForm({
    //used to specify the namespace for all the state that is generated by this cmp
    //needs to have unique value - if we want to isolate it and no share state with
    //any other redux-form
    form: 'PostsNewForm',
    validate
})(
    connect(null, { createPost })(PostsNew)
);